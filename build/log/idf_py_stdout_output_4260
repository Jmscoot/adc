Command: ninja all
[1/9] Performing build step for 'bootloader'
[1/1] C:\WINDOWS\system32\cmd.exe /C "cd /D C:\Users\1002s\esp_32\mic2\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.5_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.5/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/Users/1002s/esp_32/mic2/build/bootloader/bootloader.bin"
Bootloader binary size 0x6680 bytes. 0x980 bytes (8%) free.
[2/9] No install step for 'bootloader'
[3/9] Completed 'bootloader'
[4/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/continuous_read_main.c.obj
[5/9] Linking C static library esp-idf\main\libmain.a
[6/9] Generating esp-idf/esp_system/ld/sections.ld
[7/9] Linking CXX executable mic2.elf
[8/9] Generating binary image from built executable
esptool.py v4.9.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/Users/1002s/esp_32/mic2/build/mic2.bin
[9/9] C:\WINDOWS\system32\cmd.exe /C "cd /D C:\Users\1002s\esp_32\mic2\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.5_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.5/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Users/1002s/esp_32/mic2/build/partition_table/partition-table.bin C:/Users/1002s/esp_32/mic2/build/mic2.bin"
mic2.bin binary size 0x30aa0 bytes. Smallest app partition is 0x100000 bytes. 0xcf560 bytes (81%) free.
